{% comment %}
  ly_global_begin
{% endcomment %}
{% capture ly-global-content %}
  {% render 'ly-global' render:true %}
{% endcapture %}
{% assign ly-global-content = ly-global-content | split: '#ly#' %}
{% assign langify_title = ly-global-content[0] %}
{% assign langify_description = ly-global-content[1] %}
{% assign langify_shop_name = ly-global-content[2] %}
{% assign langify_shop_description = ly-global-content[3] %}
{% assign canonical_langify_url = ly-global-content[4] %}
{% assign langify_shop_url = ly-global-content[5] %}
{% assign langify_shop_domain = ly-global-content[6] %}
{% comment %}
  ly_global_end
{% endcomment %}
{% liquid
  assign limit = section.settings.grid | times: section.settings.rows
  case section.settings.grid
    when 2
      assign grid_item_width = 'grid-collection-50'
    when 3
      assign grid_item_width = 'grid-collection-33'
    when 4
      assign grid_item_width = 'grid-collection-25'
  endcase
%}

{% paginate collection.products by limit %}

<div class="width-soru">
  <div class="list-collection" id="collection-soru-list">

    <ul id="array-collection" class="grid-collection {{ grid_item_width }}">
      {% for product in collection.products %}
        <li class="item-collection-product">
        
          {% render 'template-card'
            product: product, 
            bg_class : "bg_card",
            image_class : "height-card-image",
            tag_class : "tag-objective",
            name_class : "name_product",
            description_class : "description_product",
            price_class : "price_product",
            discount_class: "price_compare",
            button_class : "btn-card-main",
            choices_class : "btn-choices-card",
            padding_class : "padding-card",
            form_class : "form-add-product"
          %}

        </li>
      {% endfor %}
    </ul>
    

    {% if is_empty_collection %}
      <div class="grid__item small--text-center">
        <p class="text-center">{% comment %}ly_i18n_replace_for_[ 'collections.general.no_matches' | t ]_begin{% endcomment %}{% capture ly_template %}{{ 'collections.general.no_matches' | t }}{% endcapture %}{% capture ly_translation %}{% render 'ly-static-string' with '19844408' render:true %}{% endcapture %}{% if ly_translation != '' and ly_translation != nil  %}{% assign escape_content = true %}{% assign ly_template = ly_translation %}{% else %}{% assign escape_content = false %}{% endif %}{% if escape_content %}{{ ly_template | escape}}{% else %}{{ ly_template }}{% endif %}{% comment %}ly_i18n_replace_end{% endcomment %}</p>
      </div>
    {% endif %}

    {%- if paginate.pages > 1 -%}
      {% render 'pagination-soru', paginate: paginate %}
    {%- endif -%}
  </div>
</div>
  
{% endpaginate %}

<script>
  var section_id = "{{ section.id }}";
  var url_collection = "{{ collection.url }}";
  var paramsFilter = [];

  var collection = {
    url: "{{ collection.url }}",
    paramsFilter: [],
    products: {{ collection.products | json }},
    variants: {{ collection.variants | json }}
  }
</script>

<script src="{% comment %}ly_asset_replace_for_[ 'filter.js' | asset_url ]_begin{% endcomment %}{% assign ly_asset = 'filter.js' %}{% capture ly_translation %}{% render 'ly-asset' with ly_asset render:true %}{% endcapture %}{{ ly_translation  }}{% comment %}ly_asset_replace_end{% endcomment %}" defer="defer"></script>

{% schema %}
{
  "name": {
    "en": "Collection pages",
    "fr": "Pages de collections"
  },
  "settings": [
    {
      "type": "range",
      "id": "grid",
      "label": {
        "en": "Products per row (grid only)",
        "fr": "Produits par rangée (grille uniquement)"
      },
      "default": 4,
      "min": 2,
      "max": 4,
      "step": 1
    },
    {
      "type": "range",
      "id": "rows",
      "label": {
        "en": "Rows per page (grid only)",
        "fr": "Rangées par page (grille uniquement)"
      },
      "default": 2,
      "min": 2,
      "max": 8,
      "step": 1
    }
  ]
}
{% endschema %}
